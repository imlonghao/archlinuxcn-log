// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/terminal.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsTerminalcss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x99\xcf\x6e\xe3\xbc\x15\xc5\xf7\x79\x0a\x62\x3e\x14\x9d\x19\xc4\x0d\xff\x88\x22\xe9\x6c\x5a\x14\xc8\xaa\xb3\x69\x9f\x80\x96\x28\x9b\x88\x2d\x05\x92\xfc\x25\x69\x30\xef\x5e\x50\x4e\x32\xba\xe7\x7a\x1a\x2d\x06\xe3\xf3\x93\x72\xce\x91\xcc\x5c\xda\x7f\x9b\xd3\x78\xda\x34\x43\x3f\xc7\xdc\xa7\x51\xbc\xdd\x08\xb1\x8b\xcd\xe3\x7e\x1c\xce\x7d\xbb\x15\x7f\x28\x57\x8e\xfb\xf2\xf2\x30\xb6\x69\xdc\x8c\xb1\xcd\xe7\x69\x2b\xec\xd3\x4b\x79\xb5\x19\x8e\xc3\xb8\x15\xcf\x87\x3c\xa7\xf2\xff\xe7\x61\x6c\x37\xbb\x31\xc5\xc7\xad\x58\xfe\xd9\x94\x57\x8a\x32\xfc\x99\xc6\xee\x38\x3c\x6f\x9e\xc7\xf8\x84\x62\x37\xf4\xf3\xa6\x8b\xa7\x7c\x7c\xdd\x8a\x2f\xff\x79\xf8\x31\xf4\xc3\xe6\xdf\x69\x7f\x3e\xc6\xf1\xcb\xad\xf8\x31\xf4\xb1\x19\x6e\xc5\x8f\xd4\x1f\x87\x5b\xf1\xcf\xa1\x9f\x86\x63\x9c\x6e\xc5\x97\x7f\xe5\x5d\x1a\xe3\x9c\x87\xbe\x40\xc3\x97\x22\x9e\xc7\x9c\xc6\x5b\x71\x1a\xfa\x61\x7a\x8a\x4d\xfa\xfc\x05\x53\xfe\x6f\xda\x0a\xa5\x2f\xd6\x8f\xb9\x4f\x9b\x43\xca\xfb\xc3\xbc\x15\x5a\x5e\x5e\x7c\x8a\x6d\x9b\xfb\xfd\x56\xa8\xea\xe9\x45\x28\x7f\x79\x75\x89\xb7\x59\x2e\xb6\x15\x4f\x63\x5a\x32\xdc\xdf\xfc\xbc\xb9\xc1\x02\xf3\x69\x2f\xde\xc4\x29\xbe\x6c\x9e\x73\x3b\x1f\xb6\x42\x49\xf9\x97\x7b\xf1\x41\x8a\x28\xde\x3e\x3a\xcb\xfd\x21\x8d\x79\xbe\x17\x73\x7a\x99\x37\x6d\x6a\x86\x4b\x90\xad\x38\xf7\x6d\x1a\x8b\x3d\xa6\x6d\xa6\xf9\xf5\x98\xb6\xa2\x8d\xd3\x21\xb5\xe5\xba\xef\x97\xdd\x1e\x4a\xbf\xbf\x2e\xfe\x87\xf6\x5e\x3f\x84\xf2\x8b\xff\xfe\x98\x5e\xbb\x31\x9e\xd2\x24\x76\xc7\xdc\x3f\x6e\x62\x9f\x4f\x97\xca\xca\xed\x9e\x87\xe5\x1f\x21\xfe\xcc\x53\xde\xe5\x63\x9e\x5f\xb7\xe2\x90\xdb\x36\xf5\x25\xfa\xcf\x5f\x29\xbb\xbd\x12\x6f\xe2\xa7\xb8\xfb\x2e\xda\xa1\xff\xeb\x2c\x76\xc3\xb1\x15\xbb\xd4\x34\xf1\x3c\x25\x91\x67\x71\x1c\x86\xc7\x49\x3c\xa7\x3c\xb6\xe2\xfb\xdd\xe7\x69\x7a\xe5\xcb\x1b\xef\xbd\xbb\xbf\x5c\xa6\x8b\xb9\x9f\xc5\xd7\x36\x35\x63\x8a\x53\x6a\x45\xee\xe7\xd4\x4f\x79\x7e\xfd\x26\x36\x62\x8a\xa7\x24\xe2\x24\xf6\x63\x7c\x15\x63\x8a\xc7\xe3\xeb\xfa\xaa\x46\xbc\xbd\xdf\xd6\x4b\x27\x79\x8e\xc7\xdc\xbc\x5f\xf9\xf2\x9f\x35\x5e\x89\xb7\xff\xdb\xf4\x72\xda\xe7\xff\xd7\x67\x5a\xf1\x26\x3e\x3b\xdb\xb2\x12\xd5\x24\xa6\x39\x3d\x4d\x5f\xcd\xad\x98\xe6\x38\xce\xdf\x44\xee\xbb\xdc\x97\x77\xc4\xe5\xaa\xcb\x19\xeb\x2b\x86\x6b\x5e\x96\xe7\x71\x3e\x8c\xc3\x79\x7f\x78\x3f\xb1\x19\x87\x69\x4a\xed\x66\x38\xcf\xe5\xf4\x5f\xd1\xe5\xaa\xd1\x7a\xf9\xf9\xfc\x55\xb1\x79\x14\x5f\x77\xe7\x59\x3c\x27\xd1\xc4\x72\x9b\xca\xcd\x59\x5e\xbf\x15\xd3\x20\xa2\x68\x73\xd7\x5d\xce\xfe\x46\xfa\x54\xab\x8b\x76\x9d\x93\x4e\xbe\x5f\x74\x4c\xe4\x76\x9a\xf5\xfd\xdc\xc9\x2e\xf8\x8f\xdf\xbe\x1f\x53\xea\x09\x6a\x56\x68\x53\x37\x56\xea\x77\xf4\x35\x1d\x8f\xc3\x33\x61\xab\xf5\x63\xd2\xee\x5c\x92\x9f\xa1\xce\xe4\x86\x18\xbb\x76\xaa\x9d\xea\x76\xef\xe4\x29\xee\x53\x3f\x47\x02\xd7\xeb\xae\x76\x9d\xeb\xba\x8f\x76\x5f\xe3\x62\xf6\xe6\xee\xbb\x38\xe4\xfd\xe1\xfd\xe9\x4b\x17\x7a\x5a\x5f\x24\xaf\xbb\xb1\xa9\x73\xb5\xfd\x7c\xf3\x15\x39\xc8\xdf\x3d\xe2\xfb\x31\x91\xa7\x36\x07\x5a\xb3\x31\xc6\x5c\xaf\x39\x87\x75\xcf\x52\x3e\x3c\x48\xf9\xbb\x9e\x73\x30\xe4\xaa\x5d\x53\xbb\xdf\x16\x9d\xc3\xba\xe9\xda\x3b\xf5\x59\x09\x36\x9d\x83\xa5\x0f\x45\xfd\x89\x5e\xa9\x3a\x07\xd2\xb5\xec\x9a\xab\x5d\xff\xfa\x03\xc3\x9a\xde\xed\xab\xd2\x24\xf9\x13\x54\xbb\x72\x5c\xad\x73\xb7\xaf\x14\xe2\x5d\x57\x99\xea\x6a\xa5\xbb\x7d\xa5\x91\x0e\xa1\xeb\x6c\x87\xb5\x16\x97\xcd\x79\x9a\x87\x93\xe8\x86\x31\x5d\xe8\x3b\xe2\xfb\xb4\x1b\xa6\x22\x96\x85\xa9\x8d\x97\x75\x93\xbe\x9b\x48\xa2\x8f\x52\x1e\xfc\x3f\x4c\x78\x58\xfe\x20\xdc\x7d\x17\x2f\xcb\xe2\xcd\x1f\xb7\x17\x55\x93\x5b\x5f\x7e\xd6\xcf\xdb\x8b\x72\xa0\x2f\x19\x56\xba\x07\x7d\x79\x1e\x57\x7a\x00\x3d\xd2\xf3\xb5\x04\xbd\xa5\xe7\x6b\x05\x7a\x07\xe7\xd3\x47\xd7\x76\xe0\x5f\x1b\xd0\xc1\xbf\xae\x40\x07\xff\xda\x82\x8e\xfe\x6b\xd0\xd1\xbf\x03\x1d\xfd\xd3\xfe\xbc\x43\xff\x01\x74\xf0\x6f\x24\xe8\xe0\xdf\x28\xd0\xc1\xbf\xd1\xa0\x83\x7f\x63\x40\x07\xff\x86\xf6\x17\xb1\x7f\x63\x41\x47\xff\x35\xe8\xe8\xdf\x81\x8e\xfe\x3d\xe8\xe8\x3f\x80\x0e\xfe\x2b\xda\x5f\x8b\xfd\x57\x0a\x74\xf0\x5f\x69\xd0\xc1\x7f\x65\x40\x07\xff\x55\x05\x3a\xf8\xaf\x2c\xe8\xe8\x9f\xf6\xd7\x61\xff\x95\x03\x1d\xfd\x7b\xd0\xd1\x7f\x00\x1d\xfc\x5b\x09\x3a\xf8\xb7\x0a\x74\xf0\x6f\xd7\xfd\x95\x77\x2f\xf8\xb7\x06\x74\xf0\x6f\x2b\xd0\xc1\xbf\xb5\xa0\xa3\xff\x1a\x74\xf4\xef\x40\x47\xff\x9e\xe8\x6c\xfd\xb1\x01\x74\xf0\x5f\x4b\xd0\xc1\x7f\xad\x40\x07\xff\xb5\x06\x1d\xfc\xd7\x06\x74\xf0\x5f\xd3\xfe\xd8\xfa\x53\x5b\xd0\xd1\x7f\x0d\x3a\xfa\x77\xa0\xa3\x7f\x0f\x3a\xfa\x0f\xa0\x83\x7f\x47\xfb\x63\xeb\x8f\x53\xa0\x83\x7f\xa7\x41\x07\xff\xce\x80\x0e\xfe\x5d\x05\x3a\xf8\x77\x16\x74\xf4\x4f\xfb\x63\xeb\x8f\x73\xa0\xa3\x7f\x0f\x3a\xfa\x0f\xa0\x83\x7f\x2f\x41\x07\xff\x5e\x81\x0e\xfe\x3d\xed\x8f\xad\x3f\xde\x80\x0e\xfe\x7d\x05\x3a\xf8\xf7\x16\x74\xf4\x5f\x83\x8e\xfe\x1d\xe8\xe8\x7f\xdd\x5f\x79\xfa\xd1\x7f\x00\x1d\xfc\xd3\x79\xdc\xb1\xf5\x87\x0c\xe1\x45\x07\xff\x64\xf4\x2e\x3a\xf8\x27\xe3\x76\xd1\xc1\x3f\x99\xb0\xcb\xbb\x13\xfc\x93\xb1\xba\xe8\xe8\xbf\x06\x1d\xfd\x3b\xd0\xd1\xbf\x07\x1d\xfd\x07\xd0\xc1\xbf\x92\xb4\x40\xb6\x00\x29\xa9\x00\xc0\x09\x54\x6a\x00\x70\x04\x95\x06\x80\x88\x57\xa8\x00\x68\xf1\x0a\x16\x00\x96\x82\xd6\xc8\x96\x21\x25\x1d\x00\x2c\x85\x07\x80\xa5\x08\x00\x60\x0a\x25\x01\xc0\x14\x4a\x01\x80\x29\x14\x6d\x92\x2d\x46\x4a\x19\x00\x30\x85\xaa\x00\xc0\x14\xca\x02\xc0\x52\xd4\x00\xb0\x14\x0e\x00\x96\x82\x36\xc9\x96\x24\xa5\x02\x00\x98\x42\x4b\x00\x30\x85\x56\x00\x60\x0a\xad\x01\xc0\x14\xda\x00\x80\x29\xc8\xc6\x24\xf2\xc1\x48\x91\x9d\x49\xe4\x93\x91\x22\x5b\x93\xc8\x47\x23\x45\xf6\x26\x91\xcf\x46\x8a\x6c\x4e\x22\x1f\x8e\x14\xd9\x9d\x44\x3e\x1d\x29\xb2\x3d\x89\x7c\x3c\x52\x64\x7f\x12\xf9\x7c\xa4\xc8\x06\x25\xf2\x01\x49\x91\x1d\x4a\xe4\x13\x92\x32\x15\x00\x98\xc2\x58\x00\x58\x0a\xda\x24\x5f\xa3\x8c\x03\x80\xa5\xf0\x00\xb0\x14\x01\x00\x4c\x51\x49\x00\x30\x45\xa5\x00\xc0\x14\x15\x6d\x92\xaf\x51\x95\x01\x00\x53\x54\x15\x00\x98\xa2\xb2\x00\xb0\x14\x35\x00\x2c\x85\x03\x80\xa5\xa0\x4d\xf2\x35\xaa\x0a\x00\x60\x0a\x2b\x01\xc0\x14\x56\x01\x80\x29\xac\x06\x00\x53\x58\x03\x00\xa6\xb0\xb4\x49\xbe\x46\x59\x0b\x00\x4b\x51\x03\xc0\x52\x38\x00\x58\x0a\x0f\x00\x4b\x11\x00\xc0\x14\x64\xf3\xd2\xf2\xe1\x49\x91\xdd\x4b\xcb\xa7\x27\x45\xb6\x2f\x2d\x1f\x9f\x14\xd9\xbf\xb4\x7c\x7e\x52\x64\x03\xd3\xf2\x01\x4a\x91\x1d\x4c\xcb\x27\x28\x45\xb6\x30\x2d\x1f\xa1\x14\xd9\xc3\xb4\x7c\x86\x52\x64\x13\xd3\xf2\x21\x4a\x91\x5d\x4c\xcb\xa7\x28\xe5\x24\x00\x98\xc2\x29\x00\x30\x85\xa3\x4d\xf2\x35\xca\x19\x00\x30\x85\xab\x00\xc0\x14\xce\x02\xc0\x52\xd4\x00\xb0\x14\x0e\x00\x96\x82\x36\xc9\xd7\x28\x17\x00\x60\x9f\x47\x4a\x00\x30\x85\x57\x00\x60\x0a\xaf\x01\xc0\x14\xde\x00\x80\x29\x3c\x6d\x92\xaf\x51\xde\x02\xc0\x52\xd4\x00\xb0\x14\x0e\x00\x96\xc2\x03\xc0\x52\x04\x00\x30\x45\xa0\x4d\xf2\x35\x2a\x28\x00\x30\x45\xd0\x00\xb0\x0f\x87\x0d\x00\x98\x22\x54\x00\x60\x8a\x60\x01\x60\x29\xd6\x4d\x76\x57\xe6\x28\xb2\xc3\xe9\xae\xcc\x51\x64\x8b\xd3\x5d\x99\xa3\xc8\x1e\xa7\xe3\x73\x94\x26\x7b\x9c\x8e\xcf\x51\x5a\x2a\x00\xf0\x53\x62\xb2\xc7\xe9\xf8\x1c\xa5\xa5\x01\x00\x3f\xe7\x26\x7b\x9c\x8e\xcf\x51\x5a\x5a\x00\x58\x8a\x1a\x00\x96\xc2\x01\xc0\x52\xd0\x26\xf9\x87\xdd\x32\x00\x80\x29\x94\x04\x00\x53\x28\x05\x00\xa6\x50\x1a\x00\xf6\x85\x83\x01\x00\x53\x28\xda\x24\x5b\xa3\xb4\xb2\x00\xb0\x14\x35\x00\x2c\x85\x03\x80\xa5\xf0\x00\xb0\x14\x01\x00\xf6\xbd\x09\x6d\x92\xad\x51\x5a\x2b\x00\x30\x85\xd6\x00\x60\x0a\x6d\x00\xc0\x14\xba\x02\x00\x53\x68\x0b\x00\x4b\x41\x9b\x64\x6b\x94\xd6\x0e\x00\x96\xc2\x03\xc0\x52\x04\x00\x30\x85\x91\x00\x60\x0a\xf8\xbe\x9b\xad\x51\x9a\x7e\x09\xe3\xcb\x01\xc0\xba\x49\xa5\xcb\x01\xc0\xba\x49\xd5\x94\x03\x80\x75\x93\xba\x2e\x07\x00\xeb\x26\x8d\x2c\x07\x00\xeb\x26\x4d\x2c\x07\x00\xeb\x26\xab\xe5\x07\x80\x75\x93\x55\x2a\x07\x05\xc8\x1e\xc7\xfa\x72\x00\xb0\x6e\x72\x09\x01\x3d\x90\x3d\x4e\xdd\x94\x03\x80\x75\x93\xcb\xf7\xbd\xd0\x03\xd9\xe3\x2c\xb7\x02\x7a\x20\x7b\x1c\x1f\xcb\x01\xc0\xba\xc9\x50\x95\x03\x80\x75\x93\x21\x95\x03\x00\x32\x99\x2f\xbf\x03\x80\x75\x93\x3b\x5d\x0e\x0a\x90\x3d\xce\xae\x29\x07\x00\xeb\x26\x97\x9e\xa0\x07\xb2\xc7\x69\x65\x39\x00\x20\x7f\xbb\x63\x39\x00\x58\x37\xb9\xdc\x6d\xe8\x81\xec\x71\xd2\xf2\x53\x80\xff\x05\x00\x00\xff\xff\xc1\x2e\x21\xb2\x2b\x26\x00\x00"

func bindataAssetsTerminalcssBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsTerminalcss,
		"assets/terminal.css",
	)
}



func bindataAssetsTerminalcss() (*asset, error) {
	bytes, err := bindataAssetsTerminalcssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/terminal.css",
		size: 9771,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1597331856, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/terminal.css": bindataAssetsTerminalcss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"terminal.css": {Func: bindataAssetsTerminalcss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
